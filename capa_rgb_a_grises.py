# -*- coding: utf-8 -*-
"""Capa RGB a Grises

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sQjC4_6yaAayLIgYX_WvqsEOffYr0hZk
"""

#importamos las librerias que vamos a usar
import tensorflow as tf
from tensorflow.keras.layers import Layer

# De las notas de clase podemos definir una capa o mas bien crearla
#le llamare convertidor y la personalizare
class convertidor(Layer):
  #llamamos al cosntructor y le pasamos cualquier paramatro adicional
    def __init__(self, **kwargs):
        super(convertidor, self).__init__(**kwargs)

    def call(self, inputs):
        # aqui tendremos a inputs (batch, height, width, 3)
        #en donde el 3 significa nuestros 3 canales RGB
        # "accedemos a los canales RGB"
        #decimos que r tome el canal 0, g el 1 y b el 2
        r= inputs[..., 0]
        g= inputs[..., 1]
        b= inputs[..., 2]
        #recurrimos a una ecuacion que trasforma rgb a grises
        gray = 0.2989 * r + 0.5870 * g + 0.1140 * b
        # se le agrega una dimencion para expresarlo como  (batch, h, w, 1)
        #es decir solo tiene un canal
        gray = tf.expand_dims(gray, axis=-1)
        return gray
#se especifica la salida
#toma la misma forma y tamaño de la imagen de rgb pero la pasa a grises
    def compute_output_shape(self, input_shape):
        return (input_shape[0], input_shape[1], input_shape[2], 1)

#añado esta secccion para probar si el codigo funciona
#importo cifar10 que es un conjunto de imagenes similar a mnist pero este
#esta enfocado en animales y vehiculos y sobre todo esta en rgb
from tensorflow.keras.datasets import cifar10
#este para generar la imagen
import matplotlib.pyplot as plt

#hacemos cargar las imagenes  en este caso del entrenamiento
(x_train, _), (_, _) = cifar10.load_data()
# aqui normalizamos
x_train = x_train.astype("float32") / 255.0
#tomamos una imagen para hacer la prueba
img_color = x_train[260]
#hacemos que la imagen paser por el convertidor
gray_layer = convertidor()
img_gray = gray_layer(tf.expand_dims(img_color, axis=0))
img_gray = img_gray[0].numpy()

# Mostramos resultado de manera conjunta
plt.subplot(1,2,1)
plt.imshow(img_color)
plt.title("Original (RGB))")
plt.axis("off")
#decimos como interpretar la imagen que pasod e rgb a grises
plt.subplot(1,2,2)
#esta parte hace eso
plt.imshow(img_gray.squeeze(), cmap="gray")
plt.title("Escala de grises")
plt.axis("off")
plt.show()